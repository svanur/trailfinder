// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrailFinder.Core.Enums;
using TrailFinder.Infrastructure.Persistence;
using TrailFinder.Infrastructure.Persistence.Converters;

#nullable disable

namespace TrailFinder.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250709215214_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "difficulty_level", new[] { "unknown", "easy", "moderate", "hard", "extreme" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "route_type", new[] { "unknown", "circular", "out-and-back", "point-to-point" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "terrain_type", new[] { "unknown", "flat", "rolling", "hilly", "mountainous" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "surface_type", new[] { "unknown", "trail", "asphalt", "sand", "snow", "ice" });
            
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "race_status", new[] { "unknown", "active", "changed", "cancelled", "deprecated" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "location_type", new[] { "unknown", "start", "aid_station", "checkpoint", "end", "start_and_end" });

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrailFinder.Core.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");
                    
                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");
                    
                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<RaceStatus>("RaceStatus")
                        .HasColumnType("race_status")
                        .HasColumnName("race_status")
                        .IsRequired();

                    b.Property<int>("RecurringMonth")
                        .HasColumnType("int")
                        .HasColumnName("recurring_month");

                    b.Property<int>("RecurringWeek")
                        .HasColumnType("int")
                        .HasColumnName("recurring_week");

                    b.Property<int>("RecurringWeekday")
                        .HasColumnType("int")
                        .HasColumnName("recurring_weekday");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");
                    
                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("web_url");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.ToTable("races", (string)null);
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.RaceLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<decimal?>("DisplayOrder")
                        .HasColumnType("numeric")
                        .HasColumnName("display_order");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<LocationType>("LocationType")
                        .HasColumnType("location_type")
                        .HasColumnName("location_type");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("race_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");
                    
                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RaceId", "LocationId")
                        .IsUnique();

                    b.ToTable("race_locations", (string)null);
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<DifficultyLevel?>("DifficultyLevel")
                        .HasColumnType("difficulty_level")
                        .HasColumnName("difficulty_level");

                    b.Property<double>("Distance")
                        .HasColumnType("int")
                        .HasColumnName("distance_meters")
                        .HasConversion<DoubleToIntConverter>()
                        .IsRequired();

                    b.Property<double>("ElevationGain")
                        .HasColumnType("int")
                        .HasColumnName("elevation_gain")
                        .HasConversion<int>()
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<LineString>("RouteGeom")
                        .HasColumnType("geometry(LineStringZ, 4326)")
                        .HasColumnName("route_geom");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");
                    
                    b.Property<string>("WebUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("web_url");
                    
                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");
                    
                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");



                    b.HasKey("Id");

                    b.HasIndex("RouteGeom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("RouteGeom"), "GIST");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.ToTable("trails", (string)null);
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.TrailLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");
                    
                    b.Property<decimal?>("DisplayOrder")
                        .HasColumnType("numeric")
                        .HasColumnName("display_order");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<LocationType>("LocationType")
                        .HasColumnType("location_type")
                        .HasColumnName("location_type");

                    b.Property<Guid>("TrailId")
                        .HasColumnType("uuid")
                        .HasColumnName("trail_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");
                    
                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TrailId", "LocationId")
                        .IsUnique();

                    b.ToTable("trail_locations", (string)null);
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.RaceLocation", b =>
                {
                    b.HasOne("TrailFinder.Core.Entities.Location", "Location")
                        .WithMany("RaceLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrailFinder.Core.Entities.Race", "Race")
                        .WithMany("RaceLocations")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.TrailLocation", b =>
                {
                    b.HasOne("TrailFinder.Core.Entities.Location", "Location")
                        .WithMany("TrailLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrailFinder.Core.Entities.Trail", "Trail")
                        .WithMany("TrailLocations")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.Location", b =>
                {
                    b.Navigation("RaceLocations");

                    b.Navigation("TrailLocations");
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.Race", b =>
                {
                    b.Navigation("RaceLocations");
                });

            modelBuilder.Entity("TrailFinder.Core.Entities.Trail", b =>
                {
                    b.Navigation("TrailLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
